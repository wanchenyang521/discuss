datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topic   Topic[]
  posts   Post[]
  comment Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Topic {
  id       String   @id @default(cuid())
  name     String
  desc     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  posts Post[]
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commonets Comment[]
  Topic     Topic?    @relation(fields: [topicId], references: [id])
  topicId   String?
}

model Comment {
  id       String    @id @default(cuid())
  content  String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post     Post?     @relation(fields: [postId], references: [id])
  postId   String?
  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
  parentId String?
}
